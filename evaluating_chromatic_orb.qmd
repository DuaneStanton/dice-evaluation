---
title: "Considering Chromatic Orb"
author: "Duane Stanton"
date: today
format:
  html:
    toc: true
    toc_depth: 3
    toc_float:
      collapsed: true
      smooth_scroll: false
    number_sections: true
    theme: paper
    highlight: haddock
    code_folding: hide
editor: visual
---

```{r setup}
library(dplyr)
library(ggplot2)
```


# Intro

The 2024 edition _Chromatic Orb_ spell has a fun mechanism that seems to have come from the 2014 edition _Chaos Bolt_ - rolling the same number two or more times on the d8 damage die enables the 'orb' to (-potentially-) 'bounce' to hit a new target. Here's the wording of the 2024 _Chromatic Orb_:

> You hurl an orb of energy at a target within range. Choose Acid, Cold, Fire, Lightning, Poison, or Thunder for the type of orb you create, and then make a ranged spell attack against the target. On a hit, the target takes 3d8 damage of the chosen type.

> If you roll the same number on two or more of the d8s, the orb leaps to a different target of your choice within 30 feet of the target. Make an attack roll against the new target, and make a new damage roll. The orb can't leap again unless you cast the spell with a level 2+ spell slot.

> Using a Higher-Level Spell Slot. The damage increases by 1d8 for each spell slot level above 1. The orb can leap a maximum number of times equal to the level of the slot expended, and a creature can be targeted only once by each casting of this spell.


# Simulation Code

The code below calculates the expected damage from casting _Chromatic Orb_ for a given combination of spell level, target ACs (armor classes), spell attack modifier, and the type of the roll (rolling with advantage/disadvantage or making a regular '1d20' roll).


__Calculating d20 attack roll probabilities__

```{r calc_1d20_prob}
# function to calculate 1d20 probabilities
# disadvantage/advantage code core source: commenter Jonathan Gilligan in 
# https://statmodeling.stat.columbia.edu/2014/07/12/dnd-5e-advantage-disadvantage-probability/
calc_1d20_prob <- function(roll_type = "1d20", min_goal = NULL) {
  if (!(roll_type %in% c("1d20", "adv", "dis"))) {
    stop("roll_typ must be one of 1d20, adv, dis")
  }
  if (!is.null(min_goal) && !(min_goal %in% c(1:20))) {
    stop("min_goal must be an integer between 1 and 20 when not NULL")
  }
  
  advantage <- unlist(outer(1:20,1:20, function(x, y) {ifelse(x > y, x, y)}))
  adv_probs <- vapply(1:20, function(i) { mean(advantage == i) }, numeric(1L))
  
  disadvantage <- unlist(outer(1:20,1:20, function(x, y) {ifelse(x < y, x, y)}))
  dis_probs <- vapply(1:20, function(i) { mean(disadvantage == i) }, numeric(1L))

  reg_probs <- rep(1 / 20, 20)
  
  names(adv_probs) <- names(dis_probs) <- names(reg_probs) <- 1:20
  
  ref_probs <- 
    if (roll_type == "adv") {adv_probs
    } else if (roll_type == "1d20") {reg_probs
    } else {dis_probs}
  
  if (is.null(min_goal)) { # output full probability vector
    ref_probs
  } else { # output probability of >= min_goal
    sum(ref_probs[as.numeric(names(ref_probs)) >= min_goal])
  }
}
```


__Calculating expected value of a damage roll (plus probability of rolling multiple same-side results for the 'bounce')__

```{r calc_dice_probs}
# function to calculate the probability of at least two same-value results
calc_prob_min2_same <- function(n_dice, n_sides) {
  if (n_dice < 2) {0
  } else if (n_dice > n_sides) {1
  } else { # p(at least 1 non-reference die matches ref. die)
    # (n_sides)! : total # of non-matched dice possible (must have n_dice < n_sides)
    # 1 / (n_sides^n_dice) : probability of such a dice combination (a single one)
    # 1 / (n_sides - n_dice) : reduces numerator count to only the # dice rolled
    1 - (factorial(n_sides) / (n_sides^n_dice * factorial(n_sides - n_dice)))
  }
}
```


__Evaluating Chromatic Orb scenarios (requires the previous two functions)__

```{r sim_chromatic_orb}
eval_chromatic_orb <- 
  function(spell_level, tgt_ac, spell_atk_mod, roll_type = "1d20") {
  if (!(roll_type %in% c("1d20", "adv", "dis"))) {
    stop("roll_typ must be one of 1d20, adv, dis")
  }
  if (!(spell_level %in% 1:9)) {stop("spell_level must be an integer between 1 and 9")}

  n_d8.0 <- 2
  n_d8 <- n_d8.0 + spell_level
  d20_tgt <- pmin(tgt_ac - spell_atk_mod, 20) # nat 20 'auto-hits'
  d20_tgt <- pmax(d20_tgt, 2) # nat 1 'auto-misses'
  
  prob_hit <- vapply(1:length(d20_tgt), function(i) {
    calc_1d20_prob(roll_type = roll_type, min_goal = d20_tgt[i])
    }, numeric(1L))
  
  prob_bounce <- calc_prob_min2_same(n_d8, n_sides = 8)
  
  dmg_ev <- n_d8 * (1 + 8) / 2
  exp_dmg_1 <- prob_hit * dmg_ev
  exp_dmg_2plus <- 
    if (length(tgt_ac) > 1) {
      prob_hit[-1] * dmg_ev * prob_bounce
    }
  
  list("exp_dmg" = sum(exp_dmg_1, exp_dmg_2plus),
       "prob_hit" = prob_hit,
       "prob_bounce" = prob_bounce)
  
}
 
#eval_chromatic_orb(9, c(sample(15:25, size = 7, replace = TRUE)), 10, "dis")
```

# Simulation Scenarios

## Probability of a 'Bounce' by Spell Level

### ...Assuming First Attack Hits:

(= P(multiple d8 dice rolling the same number | # d8 dice))

```{r p-bounce-post-hit}
pbounce_0_sim <- data.frame(spell_level = 1:9)

pbounce_lvl9

pbounce_0_sim$pbounce <- 
  vapply(1:nrow(pbounce_0_sim), function(i) {
    cdp <- 
      calc_dice_probs(n_dice = pbounce_0_sim$spell_level[i] + 2,
                      n_sides = 8,
                      tgt_val = NULL)
    #   p(roll result) * p(multiple same-side dice)
    sum(cdp$prob_tot * cdp$prob_mult)
  }, numeric(1L))
```


### Conditional on Target 1 AC, Spell Attack Modifier, and Attack Roll Type:


## Expected Damage for Varying Enemy AC

To keep the simulation runtime reasonable, let's hold a few parameters fixed:

```{r exp-dmg-sim}


eval_chrorb(spell_level = 2, tgt_ac = c(15, 12), spell_atk_mod = 7, roll_type = "str")

eval_chrorb_df_scenarios <- 
  expand.grid(
    spell_level = 1:1,
    ac1 = 10:20,
    ac2 = 10:20,
    spell_atk_mod = 7,
    roll_w = c("dis", "1d20", "adv")
  )

eval_chrorb_df_scenarios$exp_dmg <- 
  vapply(1:nrow(eval_chrorb_df_scenarios), function(i) {
    eval_chrorb(
      spell_level = eval_chrorb_df_scenarios$spell_level[i], 
      tgt_ac = unlist(eval_chrorb_df_scenarios[i, c("ac1", "ac2")]), 
      spell_atk_mod = eval_chrorb_df_scenarios$spell_atk_mod[i], 
      roll_type = eval_chrorb_df_scenarios$roll_w[i]
      )$exp_tot_dmg
  }, numeric(1L))

eval_chrorb_df_scenarios$roll_w <- 
  factor(eval_chrorb_df_scenarios$roll_w, levels = c("dis", "1d20", "adv"))

spl_lvls <- unique(eval_chrorb_df_scenarios$spell_level)
spl_lvls <- spl_lvls[order(spl_lvls)]

min_dmg <- 0
max_dmg_ovr <- max(eval_chrorb_df_scenarios$exp_dmg)

eval_chrorb_plots <- 
  lapply(1:length(spl_lvls), function(i) {
    df_ <- filter(eval_chrorb_df_scenarios, spell_level == spl_lvls[i])
    
    # filter data to only label some expected damage cases (easier to read)
    ac1_rg <- min(df_$ac1):max(df_$ac1)
    ac2_rg <- min(df_$ac2):max(df_$ac2)
    
    ac1_keep <- ac1_rg[ac1_rg %% 2 == 1]
    ac2_keep <- ac2_rg[ac2_rg %% 2 == 1]
    
    df_lbl <- filter(df_, ac1 %in% ac1_keep, ac2 %in% ac2_keep)
    
    
    x_brks <- min(df_$ac1):max(df_$ac1)
    x_lbls <- as.character(x_brks)
    x_lbls[(1:length(x_lbls)) %% 2 == 0] <- "" # alternate blank labels
    
    y_brks <- min(df_$ac2):max(df_$ac2)
    y_lbls <- as.character(y_brks)
    y_lbls[(1:length(y_lbls)) %% 2 == 0] <- ""
    
    scale_min <- min_dmg
    scale_max <- max_dmg_ovr
    
    ggplot(df_, aes(x = ac1, y = ac2, fill = exp_dmg)) +
      geom_raster(interpolate = TRUE) +
      geom_vline(data = df_lbl, aes(xintercept = ac1), 
                 linewidth = 0.5, color = "lightgrey") +
      geom_hline(data = df_lbl, aes(yintercept = ac2), 
                 linewidth = 0.5, color = "lightgrey") +
      geom_text(data = df_lbl, 
                aes(label = sprintf("%.1f", exp_dmg),
                    color = exp_dmg)) +
      facet_wrap(facets = vars(roll_w)) +
      labs(title = paste("Expected Damage from Chromatic Orb - level", spl_lvls[i]), 
           subtitle = "by Roll Type, Target 1 AC (x), Target 2 AC (y)",
           x = "Target 1 AC", 
           y = "Target 2 AC",
           caption = "dis(advantage), 1d20, adv(antage) roll types") +
      scale_x_continuous(breaks = x_brks, labels = x_lbls) +
      scale_y_continuous(breaks = y_brks, labels = y_lbls) +
      scale_color_gradient(limits = c(scale_min, scale_max),
                           low = "darkgrey", high = "black",
                           guide = "none") +
      scale_fill_gradient(limits = c(scale_min, scale_max),
                          low = "lightgrey", high = "firebrick",
                          guide = "none") +
      theme_bw() +
      theme(legend.position = "bottom", legend.direction = "horizontal")
  })
```

```{r output-exp-dmg-plots}
#| results: asis

for (i in 1:length(eval_chrorb_plots)) {
  cat("\n\n")
  print(eval_chrorb_plots[[i]])
  cat("\n\n")
}
```

